"""Configuration management for pkg-ext.

Supports two-tier configuration:
1. User-level settings from ~/.config/pkg-ext/config.toml (personal preferences)
2. Project-level settings from pyproject.toml [tool.pkg-ext] (team conventions)
"""

import logging
from dataclasses import dataclass
from pathlib import Path
from typing import Any

logger = logging.getLogger(__name__)


@dataclass
class UserConfig:
    """User-level preferences stored in ~/.config/pkg-ext/config.toml."""

    editor: str = "code"  # fallback to $EDITOR env var
    skip_open_in_editor: bool = False


@dataclass
class ProjectConfig:
    """Project-level conventions stored in pyproject.toml [tool.pkg-ext]."""

    tag_prefix: str = ""
    file_header: str = "# Generated by pkg-ext"
    commit_fix_prefixes: tuple[str, ...] = ("fix:",)
    commit_diff_suffixes: tuple[str, ...] = (".py",)


def _safe_load_toml(path: Path) -> dict[str, Any]:
    """Safely load TOML file, returning empty dict on any error."""
    try:
        import tomllib
    except ImportError:
        # Python < 3.11 fallback
        try:
            import tomli as tomllib  # type: ignore
        except ImportError:
            logger.warning("No TOML library available. Config loading disabled.")
            return {}

    if not path.exists():
        return {}

    try:
        with open(path, "rb") as f:
            return tomllib.load(f)
    except Exception as e:
        logger.warning(f"Failed to load TOML config from {path}: {e}")
        return {}


def load_user_config() -> UserConfig:
    """Load user configuration from ~/.config/pkg-ext/config.toml."""
    config_path = Path.home() / ".config" / "pkg-ext" / "config.toml"
    data = _safe_load_toml(config_path)

    user_data = data.get("user", {})
    return UserConfig(
        editor=user_data.get("editor", UserConfig.editor),
        skip_open_in_editor=user_data.get(
            "skip_open_in_editor", UserConfig.skip_open_in_editor
        ),
    )


def load_project_config(repo_root: Path) -> ProjectConfig:
    """Load project configuration from pyproject.toml [tool.pkg-ext]."""
    pyproject_path = repo_root / "pyproject.toml"
    data = _safe_load_toml(pyproject_path)

    pkg_ext_data = data.get("tool", {}).get("pkg-ext", {})
    return ProjectConfig(
        tag_prefix=pkg_ext_data.get("tag_prefix", ProjectConfig.tag_prefix),
        file_header=pkg_ext_data.get("file_header", ProjectConfig.file_header),
        commit_fix_prefixes=tuple(
            pkg_ext_data.get("commit_fix_prefixes", ProjectConfig.commit_fix_prefixes)
        ),
        commit_diff_suffixes=tuple(
            pkg_ext_data.get("commit_diff_suffixes", ProjectConfig.commit_diff_suffixes)
        ),
    )
