import logging
import os
from collections import defaultdict
from pathlib import Path

from zero_3rdparty.iter_utils import flat_map

from pkg_ext.models import PkgSrcFile, RefSymbol

logger = logging.getLogger(__name__)


def write_init(
    init_file: Path, init_refs: dict[str, RefSymbol], files: list[PkgSrcFile]
) -> None:
    """Write the __init__.py file with the exposed references."""
    file_import_names: dict[str, list[str]] = defaultdict(list)
    for file in files:
        if names := sorted(
            name
            for name, symbol in init_refs.items()
            if symbol.rel_path == file.relative_path
        ):
            logger.info(f"Exposed references found in {file.relative_path}: {names}")
            file_import_names[
                f"{init_file.parent.name}."
                + file.relative_path.replace(os.path.sep, ".").removesuffix(".py")
            ] = names
        else:
            logger.info(f"No exposed references found in {file.relative_path}")

    all_names = sorted(flat_map(file_import_names.values()))
    init_lines = [
        "# Generated by pkg-ext",
        "# flake8: noqa",
        *[
            f"from {file_name} import {', '.join(names)}"
            for file_name, names in file_import_names.items()
        ],
        "",
        "__all__ = [",
        *[f'    "{name}",' for name in all_names],
        "]",
        "",
    ]
    init_file.write_text("\n".join(init_lines) + "\n")
