from __future__ import annotations

from functools import total_ordering, wraps
from pathlib import Path
from typing import Any, Callable, ClassVar, TypeVar

from model_lib.model_base import Entity
from model_lib.serialize import dump
from pydantic import Field
from zero_3rdparty import file_utils

from pkg_ext.errors import InvalidGroupSelectionError, NoPublicGroupMatch

from .py_symbols import RefSymbol
from .types import PyIdentifier, SymbolRefId

T = TypeVar("T", bound=Callable)


def ensure_disk_path_updated(func: T) -> T:
    @wraps(func)
    def wrapper(self_: PublicGroups, *args: Any, **kwargs: Any) -> Any:
        try:
            return func(self_, *args, **kwargs)
        except BaseException:
            raise
        finally:
            storage_path = self_.storage_path
            if storage_path is None:
                return
            file_ext = storage_path.suffix
            assert file_ext in (".yaml", ".yml"), (
                "Disk path must have .yaml or .yml extension"
            )
            self_.groups.sort()
            groups_dumped = []
            for group in self_.groups:
                group_dict = group.model_dump(exclude={"owned_refs", "owned_modules"})
                if owned_modules := sorted(group.owned_modules):
                    group_dict["owned_modules"] = owned_modules
                if owned_refs := sorted(group.owned_refs):
                    group_dict["owned_refs"] = owned_refs
                groups_dumped.append(group_dict)
            self_dict = self_.model_dump(exclude={"storage_path", "groups"})
            self_dict["groups"] = groups_dumped
            yaml_text = dump(self_dict, "yaml")
            yaml_text = f"# generated by pkg-ext, never edit\n{yaml_text}"
            file_utils.ensure_parents_write_text(storage_path, yaml_text)

    return wrapper  # type: ignore


@total_ordering
class PublicGroup(Entity):
    ROOT_GROUP_NAME: ClassVar[str] = "__ROOT__"
    name: PyIdentifier
    owned_refs: set[SymbolRefId] = Field(default_factory=set)
    owned_modules: set[str] = Field(default_factory=set)

    @property
    def is_root(self) -> bool:
        return self.name == self.ROOT_GROUP_NAME

    @property
    def sorted_refs(self) -> list[str]:
        return sorted(self.owned_refs)

    def dump(self) -> dict:
        return self.model_dump()

    def __lt__(self, other) -> bool:
        if not isinstance(other, PublicGroup):
            raise TypeError
        return self.name < other.name


def _default_public_groups() -> list[PublicGroup]:
    return [PublicGroup(name=PublicGroup.ROOT_GROUP_NAME)]


class PublicGroups(Entity):
    groups: list[PublicGroup] = Field(default_factory=_default_public_groups)
    storage_path: Path | None = None

    @property
    def name_to_group(self) -> dict[str, PublicGroup]:
        return {group.name: group for group in self.groups}

    @property
    def groups_no_root(self) -> list[PublicGroup]:
        return sorted(group for group in self.groups if not group.is_root)

    @property
    def root_group(self) -> PublicGroup:
        root = next((group for group in self.groups if group.is_root), None)
        assert root, "root group not found"
        return root

    def matching_group(self, ref: RefSymbol) -> PublicGroup:
        if match_by_module := [
            group for group in self.groups if ref.module_path in group.owned_modules
        ]:
            assert len(match_by_module) == 1, (
                f"Expected exactly one matching group for {ref.name} in {ref.module_path}, got {len(match_by_module)}"
            )
            return match_by_module[0]
        raise NoPublicGroupMatch(
            f"No public group found for symbol {ref.name} in module {ref.module_path}"
        )

    def matching_group_by_module_path(self, module_path: str) -> PublicGroup:
        if match_by_module := [
            group for group in self.groups if module_path in group.owned_modules
        ]:
            assert len(match_by_module) == 1, (
                f"Expected exactly one matching group for module {module_path}, got {len(match_by_module)}: {match_by_module}"
            )
            return match_by_module[0]
        raise NoPublicGroupMatch(f"No public group found for module {module_path}")

    def get_or_create_group(self, name: str) -> PublicGroup:
        group = self.name_to_group.get(name)
        if not group:
            group = PublicGroup(name=name)
            self.groups.append(group)
        return group

    @ensure_disk_path_updated
    def add_module(self, group_name: str, module_path: str) -> PublicGroup:
        group = self.get_or_create_group(group_name)
        try:
            existing = self.matching_group_by_module_path(module_path)
            if existing.name != group.name:
                raise InvalidGroupSelectionError(
                    reason=f"existing_group: {existing.name} matched for module {module_path} selected for {group_name}"
                )
            return existing
        except NoPublicGroupMatch:
            group.owned_modules.add(module_path)
            return group

    @ensure_disk_path_updated
    def add_ref(self, ref: RefSymbol, group_name: str) -> PublicGroup:
        group = self.get_or_create_group(group_name)
        try:
            matching_group = self.matching_group(ref)
            if matching_group.name != group_name:
                raise InvalidGroupSelectionError(
                    reason=f"existing_group: {matching_group.name} matched for {ref.local_id}"
                )
            group.owned_refs.add(ref.local_id)
            group.owned_modules.add(ref.module_path)
        except NoPublicGroupMatch:
            group.owned_refs.add(ref.local_id)
            group.owned_modules.add(ref.module_path)
        return group
